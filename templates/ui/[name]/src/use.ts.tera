---
to: '{{ name }}/src/use.ts'
---

import { View, ViewProps } from '@tarojs/components'
import { type NativeProps } from '@srcube-taro/utils-taro'
import { type ReactRef } from '@srcube-taro/utils-react'
import { useMemo, useCallback } from 'react'
import { {{ name }}, type {{ name | capitalize }}VariantProps } from './style'

interface Props {
  /**
   * Ref to the DOM element
   */
  ref?: ReactRef<NativeProps<ViewProps>>
}

export type Use{{ name | capitalize }}Props = Props &
  Omit<NativeProps<ViewProps>, keyof {{ name | capitalize }}VariantProps> &
  {{ name | capitalize }}VariantProps

export function use{{ name | capitalize }}(props: Use{{ name | capitalize }}Props) {
  const { ref, children, className, ...rest } = props

  const Component = View

  const styles = useMemo(() => {
    return {{ name }}({ className })
  }, [className])

  const get{{ name | capitalize }}Props = useCallback(() => {
    return {
    }
  }, [])

  return {
    Component,
    domRef: ref,
    styles,
    children,
    get{{ name | capitalize }}Props,
  }
}

export type Use{{ name | capitalize }}Return = ReturnType<typeof use{{ name | capitalize }}>
